/*!
 * PrettyMIDI
 * https://github.com/nick-thompson/prettymidi
 *
 * Copyright (c) 2012 Nick Thompson
 * MIT License
 *
 * @preserve
 */
(function(){var map={8:{type:"noteOff",params:["note","velocity"]},9:{type:"noteOn",params:["note","velocity"]},10:{type:"noteAftertouch",params:["note","value"]},11:{type:"controller",params:["controllerNumber","value"]},12:{type:"programChange",params:["programNumber"]},13:{type:"channelAftertouch",params:["value"]},14:{type:"pitchBend",params:["lowValue","highValue"]}};function Decoder(){}Decoder.prototype.decode=function(buffer){this.buffer=new DataView(buffer);var invalidHeader=false||this.buffer.getUint8(0)!==77||this.buffer.getUint8(1)!==84||this.buffer.getUint8(2)!==104||this.buffer.getUint8(3)!==100||this.buffer.getUint32(4)!==6,format=this.buffer.getUint16(8),nTracks=this.buffer.getUint16(10),ticksPerBeat=this.buffer.getUint16(12);if(invalidHeader){throw new Error("malformed file header")}if(format!==1){throw new Error("Only MIDI file format type 1 is supported.")}this.data={format:format,nTracks:nTracks,ticksPerBeat:ticksPerBeat,tracks:[]};this.pointer=14;while(--nTracks){this.decodeTrack()}return this.data};Decoder.prototype.decodeTrack=function(){var invalidHeader=false||this.buffer.getUint8(this.pointer++)!==77||this.buffer.getUint8(this.pointer++)!==84||this.buffer.getUint8(this.pointer++)!==114||this.buffer.getUint8(this.pointer++)!==107,byteLength=this.buffer.getUint32(this.pointer),end=this.pointer+byteLength+4,track={byteLength:byteLength,events:[]};if(invalidHeader){throw new Error("Malformed track header.")}this.pointer+=4;while(this.pointer<end){track.events.push(this.decodeTrackEvent())}this.data.tracks.push(track)};Decoder.prototype.decodeTrackEvent=function(){var deltaTime=this.decodeVarInt(),type=this.buffer.getUint8(this.pointer),evt;switch(type){case 255:this.pointer+=2;this.decodeVarInt();evt={};break;case 240:case 247:do{}while(this.buffer.getUint8(this.pointer++)!==247);evt={};break;default:if(type&128){evt=this.decodeMidiEvent()}else{evt=this.decodeRunningMidiEvent()}break}evt.deltaTime=deltaTime;return evt};Decoder.prototype.decodeVarInt=function(){var value=0,nextByte;do{nextByte=this.buffer.getUint8(this.pointer++);value=value<<7;value+=nextByte&127}while(nextByte>128);return value};Decoder.prototype.decodeMidiEvent=function(){var tmp=this.buffer.getUint8(this.pointer++),type=(tmp&240)>>4,channel=tmp&15,evt={type:map[type].type,channel:channel};map[type].params.forEach(function(param){evt[param]=this.buffer.getUint8(this.pointer++)}.bind(this));this.lastEvent={type:type,channel:channel};return evt};Decoder.prototype.decodeRunningMidiEvent=function(){var evt={type:this.lastEvent.type,channel:this.lastEvent.channel};map[evt.type].params.forEach(function(param){evt[param]=this.buffer.getUint8(this.pointer++)}.bind(this));return evt};var pm={decode:function(buffer){return(new Decoder).decode(buffer)}};if(typeof exports!=="undefined"){if(typeof module!=="undefined"&&module.exports){exports=module.exports=pm}exports.pm=pm}else{this.pm=pm}})();