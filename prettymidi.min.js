/*!
 * PrettyMidi
 * https://github.com/nick/prettymidi
 *
 * Copyright (c) 2012 Nick Thompson
 * MIT License
 *
 * @preserve
 */
(function(context,definition){if(typeof module!=="undefined"&&module.exports){module.exports=definition()}else if(typeof define==="function"&&typeof define.amd==="object"){define(definition)}else{context["prettyMidi"]=definition()}})(this,function(){var map={8:{type:"noteOff",params:["note","velocity"]},9:{type:"noteOn",params:["note","velocity"]},10:{type:"noteAftertouch",params:["note","value"]},11:{type:"controller",params:["controllerNumber","value"]},12:{type:"programChange",params:["programNumber"]},13:{type:"channelAftertouch",params:["value"]},14:{type:"pitchBend",params:["lowValue","highValue"]}};var decode=function(buffer){var data=new DataView(buffer),index=0,invalidHeader=false||data.getUint8(0)!==77||data.getUint8(1)!==84||data.getUint8(2)!==104||data.getUint8(3)!==100||data.getUint32(4)!==6,format=data.getUint16(8),nTracks=data.getUint16(10),ticksPerBeat=data.getUint16(12);if(invalidHeader){throw new Error("malformed file header")}if(format!==1){throw new Error("Only MIDI file format type 1 is supported.")}return{format:format,ticksPerBeat:ticksPerBeat,tracks:function(){var tracks=[],index=14;for(var i=0;i<nTracks;i++){index=decodeTrack(data,tracks,index);if(index===-1){throw new Error("error reading track #"+i)}}return tracks}()}};var decodeTrack=function(data,tracks,offset){var invalidHeader=false||data.getUint8(offset++)!==77||data.getUint8(offset++)!==84||data.getUint8(offset++)!==114||data.getUint8(offset++)!==107,byteLength=data.getUint32(offset),end=offset+byteLength+4,track={byteLength:byteLength,events:[]};if(invalidHeader){throw new Error("malformed track header")}offset+=4;while(offset<end){offset=decodeTrackEvent(data,track,offset);if(offset===-1){throw new Error("error decoding track event")}}if(track.events.length>0){tracks.push(track)}return offset};var decodeTrackEvent=function(data,track,offset){var nEvents=track.events.length,tmp=decodeVariableLengthValue(data,offset),type=data.getUint8(offset=tmp.offset),evt={deltaTime:tmp.value};offset=type===255?ignoreMetaEvent(data,offset,evt=null):type===240||type===247?ignoreSysexEvent(data,offset,evt=null):type&128?decodeMidiEvent(data,offset,evt):nEvents>0?decodeRunningMidiEvent(data,offset,evt,track.events[nEvents-1]):-1;if(offset===-1){throw new Error("running mode event with no previous event")}if(evt!==null){track.events.push(evt)}return offset};var decodeVariableLengthValue=function(data,offset){var value=0,nextByte;do{nextByte=data.getUint8(offset++);value=value<<7;value+=nextByte&127}while(nextByte>128);return{offset:offset,value:value}};var ignoreMetaEvent=function(data,offset,evt){var tmp=decodeVariableLengthValue(data,offset+2);return tmp.offset+tmp.value};var ignoreSysexEvent=function(data,offset,evt){do{}while(data.getUint8(offset++)!==247);return offset};var decodeMidiEvent=function(data,offset,evt){var tmp=data.getUint8(offset++),type=(tmp&240)>>4,channel=tmp&15;evt.type=map[type].type;evt.channel=channel;map[type].params.forEach(function(param){evt[param]=data.getUint8(offset++)});return offset};var decodeRunningMidiEvent=function(data,offset,evt,lastEvent){evt.type=lastEvent.type;evt.channel=lastEvent.channel;map[evt.type].params.forEach(function(param){evt[param]=data.getUint8(offset++)});return offset};return{decode:decode}});